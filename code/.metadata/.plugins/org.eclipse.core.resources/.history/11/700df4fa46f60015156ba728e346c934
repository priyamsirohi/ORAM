package server;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;

import ringoram.*;
import message.*;
import message.Message.MessageType;

public class Server extends Thread{

	protected Stash stash;
	protected TreeORAM tree;
	protected ServerSocket serverListener;
	protected Socket server;
	protected int portnum;
	protected DataResultLog drs;
	protected int accessCounter;
	protected int eviction_rate;
	protected int path_counter;
	protected ObjectInputStream is;
	protected ObjectOutputStream os;
	protected int num_clients;
	
	public Server(int N, int bucket_size, int num_dummy_blocks, int portnum, int eviction_rate, int num_clients) throws UnknownHostException, IOException{
		this.stash = new Stash();
		this.tree = new TreeORAM(N,bucket_size,num_dummy_blocks);
		this.portnum = portnum;
		this.serverListener = new ServerSocket(portnum);
		this.server = serverListener.accept();
		this.drs = new DataResultLog(eviction_rate);
		this.accessCounter = 0;
		this.path_counter = 0;
		this.eviction_rate = eviction_rate;
		is = new ObjectInputStream(server.getInputStream());
		os = new ObjectOutputStream(server.getOutputStream());
		this.num_clients = num_clients;
	}
	
	
	
	
	public void run(){
		
			for(int i = 0;i<num_clients;i++){
				ServerSocket ss = null;
				try {
					ss = new ServerSocket(++portnum);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				Socket s = new Socket();
				try {
					s = ss.accept();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				ServerWorkerSerial worker = null;
				try {
					worker = new ServerWorkerSerial(s, this.tree, this.stash,this.drs,
							this.accessCounter, this.eviction_rate,this.path_counter);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				worker.run();
				
			}
			System.out.println("Server is up");
			
		}
	
			
	}

