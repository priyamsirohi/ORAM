package client;

import ringoram.*;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.UnknownHostException;

import message.*;
import message.Message.MessageType;

import java.util.logging.FileHandler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

public class Client {

	private Socket clientListener;
    private int clientID;
    private int messageID;
     private int portNum;
    private String hostname;
     private Logger clientLog;
     private FileHandler fh;
     private SimpleFormatter formatter;
    private PositionMap pm;
    
    
    public Client(int portnum, String host,int clientID) throws UnknownHostException, IOException{
        this.portNum=portnum;
        this.hostname=host;
        pm = new PositionMap(8);
        this.messageID = 0;
        this.clientID = clientID;
        clientListener = new Socket(hostname,portNum);
        String fname = "Client#" + clientID;
        clientLog = Logger.getLogger(fname);
        fh = new FileHandler(fname);
        formatter = new SimpleFormatter();
        fh.setFormatter(formatter);
        
    }
	
    
   /* this is just a test function 
    
    public void writeToSocket() throws UnknownHostException, IOException, InterruptedException, ClassNotFoundException{
    	ObjectOutputStream os = new ObjectOutputStream(clientListener.getOutputStream());		
    	ObjectInputStream is = new ObjectInputStream(clientListener.getInputStream());
    	while(true){
    	 		System.out.println("CLIENT: Writing to socket");               
                
                               	
                Ping ping = new Ping(clientID, messageID++);
                      
                os.writeObject(ping);
                os.flush();
                System.out.println("CLIENT: Writing done");
                Message ms = (Message) is.readObject();
                if (ms.getMessageType().compareTo(MessageType.Ping) != 0)
                	Thread.sleep(5000); 	
    			}
	 }
        
    }
	

*/
    
    
    
   
    
    public void clientAccessRingORAM(int blk_id) throws UnknownHostException, IOException, InterruptedException, ClassNotFoundException{
    	ObjectOutputStream os = new ObjectOutputStream(clientListener.getOutputStream());		
    	ObjectInputStream is = new ObjectInputStream(clientListener.getInputStream());
    	
    	clientLog.info("Starting access for block ID"+blk_id);
 
    	clientLog.info("Pinging Server");
    	
    	Ping ping = new Ping(clientID, messageID++);
    	
    	os.writeObject(ping);
    	os.flush();
    	
    	 Message ms = (Message) is.readObject();
         while (ms.getMessageType().compareTo(MessageType.Ping) != 0){
         	Thread.sleep(5000); 	
			}
    	
    	clientLog.info("Response from Server received");
    	
    	clientLog.info("Get PM entry");
    	
    	int leaf_id = getPM(blk_id);
    	
    	clientLog.info("Retrieved PM entry"); 
    	clientLog.info("Get MetaData");
    	
    	MetaData[] md = getMetadata(leaf_id,is,os);
    	
    	clientLog.info("Retrieved MetaData");
    
    	  	    			
    	GetBlocksFromPath gbp = new GetBlocksFromPath(clientID,messageID++,leaf_id,md.length);
    	
    	int req_index = 0;
    	
    	for (int i = 0 ;i<md.length;i++){
    		for(int j = 0;j<md[i].log_bucket_pos_map.length;j++){
    			if (md[i].log_bucket_pos_map[j] == blk_id){
    				gbp.blk_num[i] = j; 	
    				req_index = i;
    			}
    			else
    				gbp.blk_num[i] = md[i].dummy_pos[md[i].bucket_access_counter++];
    		}
   		
    	}

    	
    	clientLog.info("Get Blocks");
    	DataBlock[] blocks;
    	blocks = getBlocks(gbp,is,os);
    	clientLog.info("Blocks Retrieved");
    	
    	
    	
    	Thread.sleep(10000);
    	
    	
    	
    	
    	
    } 	
    	
    	
    public int getPM(int blk_id){
    	
    	return pm.getMap(blk_id);
    }
    	
    public MetaData[] getMetadata(int leaf_id,ObjectInputStream is, ObjectOutputStream os) throws IOException, ClassNotFoundException, InterruptedException{
    	
    	//TODO: check for message authenticity
    
    	GetMetadata gm = new GetMetadata(clientID,messageID++,leaf_id);
    	
    	os.writeObject(gm);
    	os.flush();
    	
    	Message ms = (Message) is.readObject();
        while (ms.getMessageType().compareTo(MessageType.GetMetadata) != 0){
        	Thread.sleep(5000); 	
			}
        
        gm = (GetMetadata) ms;
        return gm.metadata;
        
     }	
    
    public DataBlock[] getBlocks(GetBlocksFromPath gbp, ObjectInputStream is, ObjectOutputStream os) throws IOException, ClassNotFoundException, InterruptedException{
    	
    	os.writeObject(gbp);
    	os.flush();
    	
    	Message ms = (Message) is.readObject();
        while (ms.getMessageType().compareTo(MessageType.GetMetadata) != 0){
        	Thread.sleep(5000); 	
			}
        
        gbp = (GetBlocksFromPath) ms;
        
        return gbp.blocks;
    	
    }
    
   public  
    	
    	
    	
    }
    