package server;

import java.io.File;
import Operations.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import pdoram.*;

public class PDOramServer {

	 String PDoramDB = "PDoramDB_srv";
	 int levels;
	 int PDoramDBSize;
	 int M;
	   File f;
	 FileInputStream fis;
	 FileOutputStream fout;
	 ObjectOutputStream out;
	 ObjectInputStream in;
	 
	 public PDOramServer(int N, int m) throws FileNotFoundException, IOException{
	      levels = (int)(Math.log(N) / Math.log(2));
	      PDoramDBSize = N*m*2; 
	       M=m;
	       f = new File(PDoramDB);
	       f.createNewFile();
	       fis = new FileInputStream(f);
	        fout = new FileOutputStream(f);
	        out= new ObjectOutputStream(fout);
	       in = new ObjectInputStream(fis);
	       	
	 }
	 
	 public int getBucketOffset(int level_num, int bucket_num){
		   
		   int offset = 0;
		   for (int i = 0; i< level_num-1;i++){
			   offset += Math.pow(2, level_num)*M*8;
		   }
		   
		   return (offset+bucket_num*M*8);
		   
	   }
	    
	  
	    
	    public int getBucketNum(int level_num, int bucket_num){
	    	int offset = 0;
	    	for (int i = 0; i < level_num; i++){
	    		offset += Math.pow(2,i);
	    	}
	    	
	    	offset += bucket_num;
	    	
	    	return offset;
	    }
	    
	    
	    public void PDOram_init(int num_levels, int bucket_size){
	    
	    	String key;
	    	for (int i = 0; i<levels-1;i++){
	        	for (int j = 0; j< Math.pow(2, i);j++){
	        	key = PDoramDB + i+"-" + j;	
	        	WritePDBucket write_bucket = new WritePDBucket(key);
	        	PDOrambucket bucket = new PDOrambucket
	        	write_bucket.write_to_file(bucket)	
	        	}
	    	
	    }
	    
	    
	    
	    public PDOrambucket PDoramRead(int level_num, int bucket_id) throws IOException, ClassNotFoundException{
	    	int offset = getBucketOffset(level_num,bucket_id);
	    	
	    
	    	fis.getChannel().position(getBucketOffset(level_num,bucket_id));
	    	
	    	PDOrambucket ret_bucket = (PDOrambucket) in.readObject();
	    	
	    	return ret_bucket;
	    }
	 
	    
	    
	   public void PDOramWriteBucket(PDOrambucket bucket, int level_num, int bucket_num) throws IOException{
		   	
		   fis.getChannel().position(getBucketOffset(level_num,bucket_num));
		   out.writeObject(bucket);
		   out.flush();
	   }
}